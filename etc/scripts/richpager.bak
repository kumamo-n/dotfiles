#!/bin/bash
#
# @(#) richpager ver.0.1 2014.10.2
#
# Usage:
#   richpager file...
#
# Description:
#   Rich pager; Cat or less automatically, with pygmentize.
#
######################################################################

function richpager()
{
    # Use cat as default pager.
    Pager='cat'
    if type pygmentize >/dev/null 2>&1; then
        Pager='pygmentize -O style=monokai -f console256 -g'
        get_styles="from pygments.styles import get_all_styles
        styles = list(get_all_styles())
        print '\n'.join(styles)"
        styles=$(echo "$get_styles" | sed -e 's/^  *//g' | python)
    fi
    Less='less -R +Gg'
    # Get display lines.
    DispLines=$(( $( stty 'size' < '/dev/tty' | cut -d' ' -f1 ) - 2 ))

    declare -i arg=0
    declare -a exist_files=()
    declare -a non_exist_files=()

    while (( $# > 0 ))
    do
        case "$1" in
            -*)
                if [[ "$1" =~ h ]]; then
                    echo "usage: richpager [-h][-nlp] file..."
                    echo "  -h       Show this help"
                    echo "  -n       Number the output lines, starting at 1"
                    echo "  -l       Use less nevertheless linage"
                    echo "  -p       Use plane text without pygmentize"
                    echo "  -s style Specify the style for highlighting"
                    return 0
                fi
                if [[ "$1" =~ n ]]; then
                    nflag='-n'
                fi
                if [[ "$1" =~ l ]]; then
                    lflag='-l'
                fi
                if [[ "$1" =~ p ]]; then
                    pflag='-p'
                fi
                if [[ "$1" =~ s ]]; then
                    declare style="default"
                    if echo "$styles" | grep -q -x "${2:-NONE}"; then
                        style="$2"
                        shift
                    fi
                    Pager="pygmentize -O style=$style -f console256 -g"
                fi
                shift
                ;;
            *)
                ((++arg))
                if [ -e "$1" ]; then
                    exist_files=("${exist_files[@]}" "$1")
                else
                    non_exist_files=("${non_exist_files[@]}" "$1")
                fi
                shift
                ;;
        esac
    done

    # Option -p
    if [ -n "$pflag" ]; then
        Pager='cat'
    fi

    #
    # Count the number of lines in the all files given as an argument
    #
    if [ -p /dev/stdin ] || (( arg < 1 )); then
        File=$( cat - )
        FileLines=$(echo -n "$File" | grep -c '')
    elif (( arg > 0 )); then
        declare -a lines=('0')
        for file in "${exist_files[@]}"
        do
            lines+="+ $(wc -l <$file)"
        done
        FileLines=$(echo "${lines[@]} + ${#non_exist_files[@]}" | bc)
    fi

    #
    # Use less if not be displayed all of the contents of the files in the terminal
    #
    #if [ -n "${exist_files}" ] || [ -p /dev/stdin ]; then
    if [ -p /dev/stdin ]; then
        if (( FileLines > DispLines )) || [ -n "$lflag" ]; then
            echo "$File" | ${Pager} | cat ${nflag} | ${Less}
        else
            echo "$File" | ${Pager} | cat ${nflag}
        fi
    else
        if (( FileLines > DispLines )) || [ -n "$lflag" ]; then
            for file in "${exist_files[@]}"
            do
                ${Pager} "$file"
            done | cat ${nflag} | ${Less}
        else
            for file in "${exist_files[@]}"
            do
                ${Pager} "$file"
            done | cat ${nflag}
        fi
    fi

    # In case of files that do not exist
    for file in "${non_exist_files[@]}"
    do
        ERR=1
        echo "$file: no such file or directory" 1>&2
    done

    if [ -n "$ERR" ]; then
        return 1
    fi
    return 0
}

richpager "$@"
