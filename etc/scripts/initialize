#!/bin/sh

DOTFILES=~/.dotfiles; export DOTFILES
e_newline() { printf "\n"; }
e_header()  { printf "\r\033[1m%s\033[0m\n" "$*"; }
e_success() { printf " \033[1;32m✔\033[0m  %s\n" "$*"; }
e_error()   { printf " \033[1;31m✖\033[0m  %s\n" "$*" 1>&2; }
e_arrow()   { printf " \033[1;34m➜\033[0m  %s\n" "$*"; }

initialize()
{
    prompt_menu() {
        local exitcode prompt choices nums i n
        e_header "Run the following init scripts."
        if _prompt_menu_draws "To edit this list, press any key except ENTER. " -1 && read -n 1 -rp "Enter to Go> " && [ -n "$REPLY" ]; then
            prompt="Press number to toggle, r/R to reverse (Separate options with spaces): "
            while _prompt_menu_draws "$1" 1 && read -rp "$prompt" nums && [ "$nums" != '' ]; do
                _prompt_menu_adds "$nums"
            done
        fi
        _prompt_menu_adds
    }

    _prompt_menu_iter() {
        local i sel state c=0
        local fn=$1; shift
        for i in $menu_options; do
            state=0
            for sel in $menu_selects; do
                [ "$sel" = "$i" ] && state=1 && break
            done
            $fn $state "$c" "$i" "$@"
            c=$((c+1))
        done
    }

    _prompt_menu_draws() {
        #e_header "$1"
        printf "\r\033[1m%s\033[0m\n" "$1"
        _prompt_menu_iter _prompt_menu_draw "$2"
    }

    _prompt_menu_draw()
    {
        document() { toupper | sed 's/\.sh//g' | sed 's/_/ /g'; }
        if [ "$1" -eq 0 ]; then method=e_error; fi
        if [ "$1" -eq 1 ]; then method=e_success; fi

        if [ -n "$4" ]; then
            if [ "$4" = '-1' ]; then
                e_arrow "$(printf "%2d) %s\n" $(($2+1)) "$(basename "$3" | document)")"
            else
                $method "$(printf "%2d) %s\n" $(($2+1)) "$(basename "$3" | document)")"
            fi
        else
            $method "$(basename "$2" | document)"
        fi
    }

    _prompt_menu_adds() {
        _prompt_menu_result=""
        _prompt_menu_iter _prompt_menu_add "$@"
        menu_selects="${_prompt_menu_result}"
    }

    _prompt_menu_add() {
        local state i n keep match
        state=$1; shift
        c=$1; shift
        bun=$1; shift
        IFS=' '
        nums="$*"
        for n in $nums; do
            if [ "$n" = 'r' -o "$n" = 'R' ]; then
                match=1; [ "$state" = 0 ] && keep=1
            elif expr "$n" : "^[0-9][0-9]*$" >/dev/null && [ $((n-1)) = "$c" ]; then
                match=1; [ "$state" = 0 ] && keep=1
            fi
        done
        [ ! "$match" -a "$state" = 1 -o "$keep" ] || return
        _prompt_menu_result="$_prompt_menu_result $bun"
    }

    toupper() { awk '{ print toupper(substr($0, 1, 1)) substr($0, 2, length($0) - 1) }'; }
    tolower() { awk '{ print tolower(substr($0, 1, 1)) substr($0, 2, length($0) - 1) }'; }
    init_files() {
        local i f t dirname oses os opt remove
        f=""
        files=$(echo $DOTFILES/etc/init/*.sh $DOTFILES/etc/init/osx/*.sh)
        for t in $files
        do
            f="$f $(DEBUG=1 bash "$t")"
        done

        menu_options=""
        menu_selects=""
        for i in $f
        do
            menu_selects="$menu_selects $i"
            menu_options="$menu_options $i"
        done

        [ -n "$f" ] && prompt_menu "Press ENTER to run checked files"
        for i in $menu_selects
        do
            echo y | bash "$i"
        done
    }
    init_files "$@"
}
initialize
